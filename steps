the first thing you have to do is download a program:
debian - this is a operating system for a wide range of devices, that has numerous packages that run on it. 
https://www.debian.org/
After, you have to enter in a virtualization software so you can perform the installation.
This case we are going to use VirtualBox - it allows users to extend their existing computer to run multiple operation systems.
click in New
Name: Born2beroot
Machine Folder: it has to be in sgoinfre, otherwise will fail because it will run out of space.
Type: Linux
Version: Debian (64-bit) - witch is the one that we download
Next

Memory size: you can let with 1024 MB

Hard disk: Create a virtual hard disk now

Hard disk file type: VDI (VirtualBox Disk Image) - you choose that one because it is used in virtualization environments to creat a replica of the disk space/drive assigned to the virtual machine

Storage on physical hard disk: Dynamically allocated

File location and size: 8.00GB is enought (if wants to do the bonus part, choose 30GB)

Now we have to go to settings to change some things:

Go to Storage - empty click on the cdroom next to optical drive- choose a disk file - debian-11...(that is the virtual machine) - ok

Now we can start the virtual machine - click start

Install

Language: English - location - other - europe - Portugal

United States - American English (is important to use that one because of our keybord)

Configure the network:
Hostname(our login with 42): sguarien42
Domain name (empty)
Root passwords: Rootusername1234
username: sguarien
password: Username1234

Configure the clock: Lisbon

Partition disk - Guided - use entire disk and set up encrypted LVM (because in the subject tells that they must be encrypted partitions)
Select the partition disk
Separate /home partitions (because of all the changes that we have to do)

Write changes? Yes

Erasing data: cancel (we dont need to erase the data)

passphrase: Passphrase1234

size: it can be 8.1GB - witch is the maximum size

Finish partitioning and write changes to disk

Write the changes to disks? Yes

Scan extra installation media? No (we dont need any extra package)

Country: Portugal

archive mirror: deb.debian.org

HTTP proxy: blank, just press continue

Participate in the package usage survey? No (we dont want the developers to see our statistics)

Deselect all the softwares to install (by pressing space) and then press enter

Install the GRUB boot? Yes - select /dev/sda...

Installation complete: Continue


STARTING THE VIRTUAL MACHINE:
remember:
Hostname: sguarien42
Rootpassword: Rootusername1234
username: sguarien
password: Username1234
passphrase: Passphrase1234

To start the virtual machine, press start - select Debian GNU/Linux

Please unlock disk - passphrase
login: username
passwords

Now we need to install sudo, but to do that we need to be in the root of the machine, not in the username area. So we need to type: <su>
password: root password
Now that we are in the right area, we can proceed with the instalation:

type: <apt install sudo> (apt is a advanced package tool, a free-software interface user that installs and removes softwares;
sudo is a command that will execute as a administrator)
Sudo stands for "substutute user do" or "super user do" and it allows you to temporarily elevate your current user account to have root privileges

Now it is better for rebooting for all changes happens.
this is done typing: <sudo reboot> , passphrase again
username, password, but we have to go to the root again, so
type: <su>
password: root password

<sudo -V> (shows the version of sudo and the arguments passed to configure when sudo was created and the plugins that can show more information)

<sudo adduser sguarien> - create a user with our login (as we already create, it will show that already exists)

<sudo addgroup user42> - create a group (GID - is a group identifier)

<sudo adduser {user} {group}> (add the user in the group) - add our user in groups: sudo and user42

<cat /etc/group> - shows all groups and users inside them

<getent group {group}> - getent shows the numbers of entries in databases

<sudo apt update> - update the package sources with their latest versions


SSH
Secure Shell is a network communication protocol that enables two computers to communicate The main function is remote access to the server through a secure channel, in where all information is encrypted

<sudo apt install openssh-server> - Main tool of conectivity for the start of the remote access

<sudo service ssh status> - if the instalation was correct, should appear Active

Once the installation is complete, some files have been created that must be configured. 

<nano /etc/ssh/sshd_config> - # at the beginning means that it is commented, to modify remove the comment and change the lines:

#Port 22 -> Port 4242
#PermitRootLogin prohibit-password -> PermitRootLogin no
                                 
<nano /etc/ssh/ssh_config>

#Port 22 -> Porto 4242

In order to update the changes:

<sudo service ssh restart>
<sudo service ssh status> - it has to appear Port 4242


UFW
Uncomplicated Firewall - it is a firewall designed for ease of use, uses command line interface and iptables for configuration
iptables is a program written in c that configures rules for the protocol of internet IPv4

<sudo apt install ufw> - to install

<sudo ufw enable> - to enable the firewall- activate

<sudo ufw allow 4242> - rule to activate conections in port 4242

<sudo ufw status> - see if everything is correctly configurated

PASSWORD

<touch /etc/sudoers.d/sudo_config> - create a file in that path where the password configuration will be stored

<mkdir /var/log/sudo> - create a sudo directory in that path for every command that is executed, input and output, will be stored in that directory

<nano /etc/sudoers.d/sudo_config> - edit the file so we can insert the commands that we need

The commands that we need to insert are:
<Defaults	passwd_tries=3> - Number of tries to insert the wrong password
<Defaults badpass_message="{Your own error Message}"> if the password is wrong, this message appears
<Defaults  logfile="/var/log/sudo/sudo_config"> file where everything is going to be register
<Defaults  log_input, log_output> every command, input and output will be saved in the directory
<Defaults  iolog_dir="/var/log/sudo"> the directory where everything is going to be save
<Defaults  requiretty> ativate TTY (shows infos from terminal, print the name of the directory conected to the input)
<Defaults  secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"> restrict directories usable by sudo

save

<nano /etc/login.defs> - edit this file to get a strong password

PASS_MAX_DAYS 99999 -> PASS_MAX_DAYS 30 (max of days that you can use the same password)
PASS_MIN_DAYS 0 -> PASS_MIN_DAYS 2 (min of days to modify a password)
PASS_WARN_AGE(the number of days left where the user recives a message to change the password) - don't need to change

<sudo apt install libpam-pwquality> - this package helps to check the quality of functions and evaluate the same according to their randomness

<nano /etc/pam.d/common-password> edit this file to change somethings about the password:

At the line: password	requisite	pam_quality.so retry=3
You will write after the retry=3: 
<minlen=10 ucredit=-1 dcredit=-1 lcredit=-1 maxrepeat=3 reject_username difok=7 enforce_for_root>
minlen - the minimum number of characters the password must contain 
ucredit - must contain at least one Uppercase character (- stands for at least, if put + refers to a maximum of those characters) 
dcredit - must contain at least one digit
lcredit - must contain at least one lowercase character
maxrepeat - cannot have the same character more than 3 times in a row
reject_username - cannot contain the username
difok - must have at least x characters that are not part of the old password
enforce_for_root - will enforce this policy for the root user

Now shutdown the machine <sudo shutdown now>

Conect with SSH (SSH or Secure Shell is an autenticatio mecanism of autentication between a host and a client. It uses encryption techniques so that all communication between clients and hosts is encrypted.)

open VirtualBox and click <Settings>
<Network> - Advanced - <Port Forwarding>
click in the image of a green plus 
change the Host Port and Guest Port to 4242 - OK

change to Bridged Adapter

open the machine, write <ip address>
inet 10.11.249.67 - get this numbers to use in the terminal

now open the terminal of the real machine and write:
<ssh sguarien@{the ip address number} -p 4242>
yes
password
(if is successfull, it will appear in green sguarien@sguarien42)

SCRIPT - is saved in a file that when executed will do the function of each command (usr/local/bin)

inside your virtual machine you will do a file called: <monitoring.sh>

so you can enter your virtual machine and make this new file, using vim or nano (<sudo nano monitoring.sh>).

In this file you will have to write all this comands:

<#!/bin/bash

# ARCH
arch=$(uname -a)

# CPU PHYSICAL
cpuf=$(grep "physical id" /proc/cpuinfo | wc -l)

# CPU VIRTUAL
cpuv=$(grep "processor" /proc/cpuinfo | wc -l)

# RAM
ram_total=$(free --mega | awk '$1 == "Mem:" {print $2}')
ram_use=$(free --mega | awk '$1 == "Mem:" {print $3}')
ram_percent=$(free --mega | awk '$1 == "Mem:" {printf("%.2f%%"), $3/$2*100}')

# DISK
disk_total=$(df -m | grep "/dev/" | grep -v "/boot" | awk '{disk_t += $2} END {printf ("%.1fGb\n"), disk_t/1024}')
disk_use=$(df -m | grep "/dev/" | grep -v "/boot" | awk '{disk_u += $3} END {print disk_u}')
disk_percent=$(df -m | grep "/dev/" | grep -v "/boot" | awk '{disk_u += $3} {disk_t+= $2} END {printf("%d"), disk_u/disk_t*100}')

# CPU LOAD
Percent_CPU=$(top -bn1 | grep '%Cpu' | cut -c 9- | awk '{printf("%.1f"), $1 + $3}')

# LAST BOOT
lb=$(who -b | awk '$1 == "system" {print $3 " " $4}')

# LVM USE
lvmu=$(if [ $(lsblk | grep "lvm" | wc -l) -gt 0 ];/nfs/homes/sguarien/VirtualBox VMs
tcpc=$(ss -ta | grep ESTAB | wc -l)

# USER LOG
ulog=$(users | wc -w)

# NETWORK
ip=$(hostname -I)
mac=$(ip link | grep "link/ether" | awk '{print $2}')

# SUDO
cmnd=$(journalctl _COMM=sudo | grep COMMAND | wc -l)

wall "	Architecture: $arch
	CPU physical: $cpuf
	vCPU: $cpuv
	Memory Usage: $ram_use/${ram_total}MB ($ram_percent%)
	Disk Usage: $disk_use/${disk_total} ($disk_percent%)
	CPU load: $Percent_CPU%
	Last boot: $lb
	LVM use: $lvmu
	Connections TCP: $tcpc ESTABLISHED
	User log: $ulog
	Network: IP $ip ($mac)
	Sudo: $cmnd cmd">

This .sh file is like a makefile, it will send commands for the virtual machine to "answer", now let's see what is each command:

# Architecture -
<uname -a>

manage resources as efficiently as possible
uname: writes the name of the operational system we are using
-a: that uses: -m, -n, -r, -s and -v
	-m: shows the hardware ID of the machine system(x86_64)
	-n: shows the pc name (sguarien42)
	-r: shows the operational system launch number (5.10.0-20-amd64) 
	-s: shows the system name (Linux)
	-v: Shows the operational system version (#1 Debian 5.10.158-3 (2022-12-13))
Linux sguarien42 5.10.0-20-amd64 #1 SMP Debian 5.10.158-2 (2022-12-13) x86_64 GNU/Linux

# CPU physical -
<grep "physical id" /proc/cpuinfo | wc -l>

grep: find and print lines that matchs a pattern - grep "physical id" /proc/cpuinfo - will print all the lines that have "physical id" inside the file "cpuinfo"
wc: prints the number of lines, words and bytes found in the file
-l: print only the lines.
If there is only one processor it will print 0, more processors will print all the information referring to it, in order to make it easier to quantify, just print the number of lines. 

# CPU virtual -
<grep "processor" /proc/cpuinfo | wc -l>
find and print the processor - which is a virtual core (vCPU), is not physical, but logic used by virtual machines.

# RAM -
<free --mega | awk '$1 == "Mem:" {print $2}'>

free: show the amount of free and used system memory
--mega: display the memory in megabytes
awk: selects parts of the text according to the pattern we give
$1 == "Mem:" {print $2}: At the line Mem, will print the output of the second column (counting Mem) - total system memory

<free --mega | awk '$1 == "Mem:" {print $3}'>
show the amount of used system memory

<free --mega | awk '$1 == "Mem:" {printf("%.2f%%"), $3/$2*100}'>
print the percentage of used memory, but for that we need math before:
%.2f: will only let you print 2 decimal places
%%: inserts a %
$3/$2*100: account needed to get the result itself 

# DISK -
<df -m | grep "/dev/" | grep -v "/boot" | awk '{disk_t += $2} END {printf ("%.1fGb\n"), disk_t/1024}'>
Print the total of memory in the memory disk
df: is used to get a complete summary of used disk space
-m: displays in MB
grep "/dev/": shows only the lines that contains "/dev/"
grep -v "/boot": don't count lines that have "/boot"
awk '{disk_t += $2} END {printf ("%.0fGb\n"), disk_t/1024}': creates the variable disk_t to store the sum of the second column and uses printf, as we don't need to use decimal numbers, we use: %.0f, Gb is to indicate that the result is in Gb, but as normaly the sum is on Mb, we ask for disk_t/1024, so the result will divide by 1024 to get binary Gb

<df -m | grep "/dev/" | grep -v "/boot" | awk '{disk_u += $3} END {print disk_u}')>
Print the memory used by the memory disk
creates a variable disk_u to store the sum of the third column and after we print it

<df -m | grep "/dev/" | grep -v "/boot" | awk '{disk_u += $3} {disk_t+= $2} END {printf("%d"), disk_u/disk_t*100}'>
Print the percentage of the used memory
Will uses math to get the used memory, divided by the total of memory and multiplied by 100, because is a percentage.

# CPU LOAD
<top -bn1 | grep '%Cpu' | cut -c 9- | awk '{printf("%.1f"), $1 + $3}'>
top: display linux processes
-b: output to top
n1: number of times it is going to repeat the top
grep '%Cpu": show the lines that contains Cpu
cut: remove things from the lines
-c: select only characters
9-: from the ninth byte
awk: will print us (percentage of time spent running user processes) and sy (percentage of time running the kernel)

# LAST BOOT
<who -b | awk '$1 == "system" {print $3 " " $4}'>
Print date and time from system last reset
who: gives information about the users logged on the pc
-b: gives information about the time and date of the last reset
awk '$1 == "system" {print $3 " " $4}': prints 3 and 4 column

# LVM USE
<if [ $(lsblk | grep "lvm" | wc -l) -gt 0 ]; then echo yes; else echo no; fi>
See if LVM (logical volume manager) is active or not
lsblk: lists information about all available block devices on the system, in "tree" fromat
grep "lvm": filters the lines that contains lvm
wc -l: print only the number of lines
the echo yes; else echo no; fi: the if statement checks whether the result of the command (number of lines) is greater than 0. If it is, the script echoes the string "yes" otherwise, it echoes the string "no".

# TCP CONNEXIONS
<ss -ta | grep ESTAB | wc -l>
Counts the number of established connections on a system (TCP Transmission Control Protocol)
ss: displays the network socket statistics
-ta: t shows all TCPs and a all TCP sockets
grep ESTAB: filters only the lunes containing ESTAB
wc -l: only the number of lines

# USER LOG
<users | wc -w>
Shows the number of users logged into the machine
users: prints the usernames of people who are logged in to the machine
wc -w: count the words, if there is more than one user, prints ahead, not in the next line

# NETWORK
<hostname -I>
displays the IP adresses assigned to the host
-I: display the IP

<ip link | grep "link/ether" | awk '{print $2}'>
retrives the MAC address of the host
ip link: display information about network interfaces on the system
grep "link/ether" - filters only lines containing link/ether
awk: extracts the second field from each line

# SUDO
<journalctl _COMM=sudo | grep COMMAND | wc -l>
Number of comands executed by Sudo
journalctl: used to see the logs
_COMM=sudo: path of the executable script, =sudo will only search for sudo
grep COMMAND: filters only lines netmask
Writes a message to all users

To test the code: <sh {file_name}>

Crontab
Is a configuration file that specifies commands to be run automatically by the cron daemon (a built-in Linux utility that run processes on your system at a schedualed time)
You can use crontab to view, create and edit.
<sudo crontab -u root -e>
-u: especifies the user that will use contrab
-e: edit or create a new crontab
Choose one or 2, will open the folder of crontab

over there you will write:
<*/10 * * * * sh /home/sguarien/monitoring.sh>
*/10 * * * *: ten minutes (time that will be executaded the task)
.../monitoring.sh or {script_path}: the path where is the file that we want to execute.

<sudo crontab -u root -l> 
Check schedule for cron jobs

There is a gate 68 open, we see that when we write this:
<ss -tunlp>
To take off this gate we will have to transform our ip adress to static.
To do that first we will need some informations:
<ip a>
we will need the number inet and brd
exemple: inet 10.11.249.66/16 brd 10.11.255.255

<nano /etc/network/interfaces>

Instead of dhcp - we write: <static>
and after that:
	<address {number inet(untill /)}
	netmask {ex: 255.255.0.0}
	gateway {number brd}>
so the numbers we got before, in ip a, we are going to use here.
netmask number will change depending on the inet number after /
so if was /8 - netmask was going to be: 255.0.0.0 as it is 16, de number is 255.255.0.0

Reset the machine so this changes is saved and than see if it worked <ss -tinlp>

Signature.txt
This file is the one we are going to send to avaliation. 
First we are going to the terminal, and we are going to enter the machine (cd sgoinfre, ls to see where you are, cd Born2beroot, ls again.. until you see Born2beroot.vdi) Then you are going to write:

<shasum Born2beroot.vdi>
To print the machine signature
shasum is used to calculate the SHA hash of a file or a string of text and pront it to the console. 
SHA(Secure Hash Algorithm) - verify the integrity of files, particularly after they have been transferred over a network

it will give you something like that:
b93c94d388997236902d548fca2fdbede849074b  Born2beroot.vdi

that is what you will write in your signature.txt
b93c94d388997236902d548fca2fdbede849074b
